name: NestJS DevSecOps CI Pipeline

permissions:
  contents: read
  actions: read
  security-events: write # For uploading SARIF to GitHub Advanced Security
  issues: write       # For ZAP to create issues
  pull-requests: write # For ZAP to comment on PRs

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

jobs:
  sast:
    name: Static Analysis (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep SAST
        run: |
          semgrep scan \
            --config auto \
            --exclude "test/*" \
            --exclude "node_modules/*" \
            --exclude "dist/*" \
            --severity ERROR \
            --sarif \
            -o semgrep_report.sarif \
            || true # Continue even if vulnerabilities are found, to allow upload

      - name: Upload Semgrep SARIF report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep_report.sarif

      - name: Upload SARIF to GitHub Advanced Security
        if: always() # Upload even if previous steps fail
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep_report.sarif
          category: semgrep

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [sast] # Depends on SAST completion
    outputs:
      artifact_name: nestjs-app-${{ github.run_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.16.0' # Ensure this matches your project's Node.js version
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build NestJS application
        run: yarn build # Assumes you have a 'build' script in package.json

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nestjs-app-${{ github.run_id }}
          path: |
            dist
            node_modules
            package.json
            yarn.lock
            # Add other files/directories needed to run your built application

  dast:
    name: Dynamic Analysis (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: build # Depends on the build job completion
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.16.0' # Match the version used for building

      - name: Download built application artifact
        uses: actions/download-artifact@v4
        with:
          name: nestjs-app-${{ github.run_id }} # Use the output from the build job
          path: ./ # Download to the current directory

      - name: Start NestJS application in background
        env:
          NODE_ENV: production
          PORT: 3001 # UPDATED PORT
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Starting NestJS application on port 3001..."
          yarn start &
          APP_PID=$!
          echo "Application started with PID $APP_PID. Waiting for it to be ready on port 3001..."
          
          timeout=120 # Increased timeout to 120 seconds
          interval=5  # seconds
          elapsed=0
          while ! nc -z localhost 3001; do # UPDATED PORT
            if [ $elapsed -ge $timeout ]; then
              echo "Timeout: Application did not start on port 3001 within $timeout seconds." # UPDATED PORT
              if ps -p $APP_PID > /dev/null; then
                echo "Application process (PID $APP_PID) is still running. Killing it."
                kill $APP_PID
              else
                echo "Application process (PID $APP_PID) already exited."
              fi
              # You might want to add steps here to capture application logs if possible
              exit 1
            fi
            echo "Port 3001 is not yet open. Retrying in $interval seconds..." # UPDATED PORT
            sleep $interval
            elapsed=$((elapsed + interval))

            if ! ps -p $APP_PID > /dev/null; then
              echo "Application process (PID $APP_PID) is no longer running. It might have crashed."
              exit 1
            fi
          done
          echo "Application is ready on port 3001." # UPDATED PORT

      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0 # Check for the latest version
        with:
          target: 'http://localhost:3001' # UPDATED PORT
          # Ensure .zap_rules.tsv exists at the repo root or remove/comment out the next line
          # rules_file_name: '.zap_rules.tsv'
          cmd_options: >-
            -a
            -J zap_report.json
            -w zap_report.md
            -r zap_report.html
            -x zap_report.xml
          issue_title: 'ZAP Scan Found Vulnerabilities in [${{ github.repository }}]'
          fail_action: false # Set to true to fail the job if ZAP finds issues above a certain risk level

      - name: Upload ZAP Report (HTML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-html-report
          path: zap_report.html

      - name: Upload ZAP Report (Markdown)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-md-report
          path: zap_report.md
      
      - name: Upload ZAP Report (XML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-xml-report
          path: zap_report.xml
          
      - name: Upload ZAP Report (JSON)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-json-report
          path: zap_report.json
