name: CI Pipeline

permissions:
  contents: read
  actions: read
  issues: write
  pull-requests: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  sast:
    name: Static Code Analysis (Semgrep & ESLint)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep SAST and Save Report
        run: semgrep --config auto --exclude "test/*" --exclude "node_modules/*" --exclude "dist/*" --severity ERROR --json > semgrep_report.json

      - name: Upload Semgrep Report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep_report.json

      - name: Run ESLint
        run: yarn lint

  tests: # Renamed from npm_test
    name: Run Tests # Updated display name
    runs-on: ubuntu-latest
    # This job can run in parallel with sast, or you can add 'needs: sast' if tests should run after SAST.

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run tests
        run: npm test # The command remains npm test as per the initial request
        
  code-coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    needs: tests # Run after tests have passed

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Generate Prisma client
        run: npx prisma generate
        
      - name: Run tests with coverage
        run: npm run test:cov
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          
      - name: Check coverage thresholds
        run: |
          COVERAGE_SUMMARY=$(cat coverage/coverage-summary.json)
          STATEMENTS=$(echo $COVERAGE_SUMMARY | jq '.total.statements.pct')
          BRANCHES=$(echo $COVERAGE_SUMMARY | jq '.total.branches.pct')
          FUNCTIONS=$(echo $COVERAGE_SUMMARY | jq '.total.functions.pct')
          LINES=$(echo $COVERAGE_SUMMARY | jq '.total.lines.pct')
          
          echo "Coverage Summary:"
          echo "Statements: $STATEMENTS%"
          echo "Branches: $BRANCHES%"
          echo "Functions: $FUNCTIONS%"
          echo "Lines: $LINES%"
          
          # Uncomment and adjust thresholds when ready to enforce them
          # [ $(echo "$STATEMENTS >= 40" | bc -l) -eq 1 ] || (echo "Statement coverage below threshold" && exit 1)
          # [ $(echo "$BRANCHES >= 30" | bc -l) -eq 1 ] || (echo "Branch coverage below threshold" && exit 1)
          # [ $(echo "$FUNCTIONS >= 40" | bc -l) -eq 1 ] || (echo "Function coverage below threshold" && exit 1)
          # [ $(echo "$LINES >= 40" | bc -l) -eq 1 ] || (echo "Line coverage below threshold" && exit 1)
