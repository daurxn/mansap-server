datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

/// Units for pricing
enum Unit {
  HOUR
  DAY
  PROJECT
}

/// Levels of experience required
enum ExperienceLevel {
  JUNIOR
  MID
  SENIOR
}

/// Types of job engagements
enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String // Remember to hash this in application logic
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postedJobs Job[]      @relation("PostedJobs")
  filledJobs Job[]      @relation("FilledJobs")
  proposals  Proposal[] // Existing proposals model
  profile    Profile?
  resume     Resume? // Relation to the Resume model
  projects   Project[] // User's portfolio projects

  applications Application[] @relation("UserApplications") // User's job applications

  // Add these new relations
  chats         ChatParticipant[]
  sentMessages  Message[]
}

model Profile {
  id         Int       @id @default(autoincrement())
  userId     Int       @unique // Foreign key to User
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade) // If User is deleted, Profile is also deleted
  age        Int?
  gender     String?
  locationId Int? // Foreign key to Location (optional, if location is not mandatory)
  location   Location? @relation(fields: [locationId], references: [id], onDelete: SetNull) // If Location deleted, set null
  bio        String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Location {
  id   Int    @id @default(autoincrement())
  name String @unique

  jobs    Job[]
  Profile Profile[]
}

model Job {
  id              Int             @id @default(autoincrement())
  name            String
  description     String          @db.Text
  requirements    String?         @db.Text
  responsibilities String?        @db.Text
  salary          Decimal         @db.Decimal(10, 2)
  unit            Unit
  experienceLevel ExperienceLevel
  jobType         JobType
  applicationDeadline DateTime?
  isRemote        Boolean         @default(false)
  companyInfo     String?         @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postedById Int
  postedBy   User @relation("PostedJobs", fields: [postedById], references: [id], onDelete: Restrict)

  filledById Int?
  filledBy   User? @relation("FilledJobs", fields: [filledById], references: [id], onDelete: SetNull)

  tags     Tag[]      @relation("JobTags")
  proposal Proposal[] // Existing proposals model

  locationId Int?
  location   Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)

  applications Application[] @relation("JobApplications") // Applications received for this job

  // Add this new relation
  chats         Chat[]

  @@index([locationId])
  @@index([postedById])
  @@index([filledById])
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
  jobs Job[]  @relation("JobTags")
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Proposal {
  id          Int            @id @default(autoincrement())
  coverLetter String         @db.Text
  salary      Decimal?       @db.Decimal(10, 2)
  status      ProposalStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  job         Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       Int
  applicant   User @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId Int

  @@index([jobId])
  @@index([applicantId])
}

// Added Resume model
model Resume {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique // Foreign key to User, ensures one-to-one
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade) // If User is deleted, Resume is also deleted
  workExperience String   @db.Text
  education      String   @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  applications Application[] @relation("ResumeApplications") // Applications submitted with this resume
}

// Added ApplicationStatus enum
enum ApplicationStatus {
  SUBMITTED
  REVIEWED
  INTERVIEWING
  OFFERED
  REJECTED
  WITHDRAWN // Applicant withdrew their application
}

// Added Application model
model Application {
  id Int @id @default(autoincrement())

  jobId Int
  job   Job @relation("JobApplications", fields: [jobId], references: [id], onDelete: Cascade)

  applicantId Int
  applicant   User @relation("UserApplications", fields: [applicantId], references: [id], onDelete: Cascade)

  resumeId Int?
  resume   Resume? @relation("ResumeApplications", fields: [resumeId], references: [id], onDelete: SetNull)

  coverLetter String?           @db.Text
  status      ApplicationStatus @default(SUBMITTED)

  appliedAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([jobId])
  @@index([applicantId])
  @@index([resumeId])
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // The job this chat is associated with (optional, as users might chat before a job is posted)
  jobId     Int?
  job       Job?     @relation(fields: [jobId], references: [id], onDelete: SetNull)

  // Chat participants
  participants ChatParticipant[]
  messages     Message[]

  @@index([jobId])
}

model ChatParticipant {
  id        Int      @id @default(autoincrement())
  chatId    Int
  userId    Int
  joinedAt  DateTime @default(now())
  
  // The chat and user this participant belongs to
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Last time the user read messages in this chat
  lastReadAt DateTime?

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
}

model Message {
  id        Int           @id @default(autoincrement())
  content   String        @db.Text
  status    MessageStatus @default(SENT)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // The chat this message belongs to
  chatId    Int
  chat      Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)

  // The sender of the message
  senderId  Int
  sender    User          @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([senderId])
}

// Project model for user portfolio
model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text
  imageUrl    String?
  projectUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // The user who owns this project
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
